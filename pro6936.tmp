[gd_scene load_steps=28 format=3 uid="uid://bq3882tkp8hwx"]

[ext_resource type="Texture2D" uid="uid://bt043n8scsipo" path="res://icon.svg" id="1_aq8cg"]
[ext_resource type="Script" path="res://scripts/move.gd" id="1_xoidt"]
[ext_resource type="Script" path="res://scripts/tween_show_up.gd" id="2_mnr4h"]
[ext_resource type="Script" path="res://scripts/move_character_back.gd" id="3_0cdfv"]
[ext_resource type="Texture2D" uid="uid://bb76chblox1qy" path="res://textures/grassMid.png" id="3_we4ca"]
[ext_resource type="Texture2D" uid="uid://c7ww3a6n54whc" path="res://textures/flagRed.png" id="4_7quu1"]
[ext_resource type="Texture2D" uid="uid://xhvgmbx5lfvs" path="res://textures/grassCenter.png" id="4_hv57n"]
[ext_resource type="Texture2D" uid="uid://35n1dsp0rogv" path="res://pokerMad.png" id="4_u55yo"]
[ext_resource type="Texture2D" uid="uid://cd053hfja0sbd" path="res://textures/lollipopBaseBrown.png" id="6_1swtq"]
[ext_resource type="Script" path="res://scripts/detect_finish_line_reached.gd" id="6_to2lt"]
[ext_resource type="Texture2D" uid="uid://c1s74jb6f2sxq" path="res://textures/lollipopFruitGreen.png" id="7_60v0s"]
[ext_resource type="Texture2D" uid="uid://c4rub87ujlihk" path="res://textures/lollipopFruitYellow.png" id="7_bwe1x"]
[ext_resource type="Texture2D" uid="uid://csn7lhln11087" path="res://textures/flagGreen2.png" id="8_06u38"]
[ext_resource type="Script" path="res://scripts/detect_starting_line_reached.gd" id="8_ouh8i"]
[ext_resource type="Script" path="res://scripts/instructions.gd" id="8_sdu8k"]
[ext_resource type="Script" path="res://scripts/announce_commands.gd" id="13_d88ly"]
[ext_resource type="Texture2D" uid="uid://biqwgtxxx2ee5" path="res://textures/flagYellow.png" id="14_ijdch"]
[ext_resource type="Script" path="res://scripts/check_player_movement.gd" id="14_yfcr8"]
[ext_resource type="Script" path="res://addons/godot_state_charts/compound_state.gd" id="18_3107p"]
[ext_resource type="Script" path="res://addons/godot_state_charts/atomic_state.gd" id="19_257rj"]
[ext_resource type="Script" path="res://addons/godot_state_charts/transition.gd" id="20_nrba1"]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_6eaqc"]
radius = 37.0
height = 74.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_24u1r"]
size = Vector2(60, 720)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_71hhf"]
size = Vector2(2160, 80)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_7xdvd"]
size = Vector2(20, 60)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_saorr"]
size = Vector2(20, 60)

[sub_resource type="GDScript" id="GDScript_upc64"]
script/source = "@icon(\"state_chart.svg\")
@tool
## This is statechart. It contains a root state (commonly a compound or parallel state) and is the entry point for 
## the state machine.
class_name StateChart 
extends Node

## The the remote debugger
const DebuggerRemote = preload(\"utilities/editor_debugger/editor_debugger_remote.gd\")

## The state chart utility class.
const StateChartUtil = preload(\"utilities/state_chart_util.gd\")

## Emitted when the state chart receives an event. This will be 
## emitted no matter which state is currently active and can be 
## useful to trigger additional logic elsewhere in the game 
## without having to create a custom event bus. It is also used
## by the state chart debugger. Note that this will emit the 
## events in the order in which they are processed, which may 
## be different from the order in which they were received. This is
## because the state chart will always finish processing one event
## fully before processing the next. If an event is received
## while another is still processing, it will be enqueued.
signal event_received(event:StringName)

@export_group(\"Debugging\")
## Flag indicating if this state chart should be tracked by the 
## state chart debugger in the editor.
@export var track_in_editor:bool = false

## If set, the state chart will issue a warning when trying to
## send an event that is not configured for any transition of 
## the state chart. It is usually a good idea to leave this
## enabled, but in certain cases this may get in the way so
## you can disable it here.
@export var warn_on_sending_unknown_events:bool = true

@export_group(\"\")
## Initial values for the expression properties. These properties can be used in expressions, e.g
## for guards or transition delays. It is recommended to set an initial value for each property
## you use in an expression to ensure that this expression is always valid. If you don't set
## an initial value, some expressions may fail to be evaluated if they use a property that has
## not been set yet.
@export var initial_expression_properties:Dictionary = {}

## The root state of the state chart.
var _state:StateChartState = null

## This dictonary contains known properties used in expression guards. Use the 
## [method set_expression_property] to add properties to this dictionary.
var _expression_properties:Dictionary = {
}

## A list of pending events 
var _queued_events:Array[StringName] = []

## Whether or not a property change is pending.
var _property_change_pending:bool = false

## Flag indicating if the state chart is currently processing. 
## Until a change is fully processed, no further changes can
## be introduced from the outside.
var _locked_down:bool = false

var _queued_transitions:Array[Dictionary] = []
var _transitions_processing_active:bool = false

var _debugger_remote:DebuggerRemote = null
var _valid_event_names:Array[StringName] = []


func _ready() -> void:
	if Engine.is_editor_hint():
		return 

	# check if we have exactly one child that is a state
	if get_child_count() != 1:
		push_error(\"StateChart must have exactly one child\")
		return

	# check if the child is a state
	var child:Node = get_child(0)
	if not child is StateChartState:
		push_error(\"StateMachine's child must be a State\")
		return
		
	# in debug builds, collect a list of valid event names
	# to warn the developer when using an event that doesn't
	# exist.
	if OS.is_debug_build():
		_valid_event_names = StateChartUtil.events_of(self)
	
	# set the initial expression properties
	if initial_expression_properties != null:
		for key in initial_expression_properties.keys():
			if not key is String and not key is StringName:
				push_error(\"Expression property names must be strings. Ignoring initial expression property with key \", key)
				continue
			_expression_properties[key] = initial_expression_properties[key]

	# initialize the state machine
	_state = child as StateChartState
	_state._state_init()

	# enter the state
	_state._state_enter.call_deferred()

	# if we are in an editor build and this chart should be tracked 
	# by the debugger, create a debugger remote
	if track_in_editor and OS.has_feature(\"editor\"):
		_debugger_remote = DebuggerRemote.new(self)


## Sends an event to this state chart. The event will be passed to the innermost active state first and
## is then moving up in the tree until it is consumed. Events will trigger transitions and actions via emitted
## signals. There is no guarantee when the event will be processed. The state chart
## will process the event as soon as possible but there is no guarantee that the 
## event will be fully processed when this method returns.
func send_event(event:StringName) -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `send_event` in _ready, please call it deferred, e.g. `state_chart.send_event.call_deferred(\\\"my_event\\\").\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `send_event`.\")
		return
		
	if warn_on_sending_unknown_events and event != \"\" and OS.is_debug_build() and not _valid_event_names.has(event):
		push_warning(\"State chart does not have an event '\", event , \"' defined. Sending this event will do nothing.\")
	
	_queued_events.append(event)
	_run_changes()
		
		
## Sets a property that can be used in expression guards. The property will be available as a global variable
## with the same name. E.g. if you set the property \"foo\" to 42, you can use the expression \"foo == 42\" in
## an expression guard.
func set_expression_property(name:StringName, value) -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `set_expression_property` in `_ready`, please call it deferred, e.g. `state_chart.set_expression_property.call_deferred(\\\"my_property\\\", 5).\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `set_expression_property`.\")
		return
	
	_expression_properties[name] = value
	_property_change_pending = true
	_run_changes()
		

## Returns the value of a previously set expression property. If the property does not exist, the default value
## will be returned.
func get_expression_property(name:StringName, default:Variant = null) -> Variant:
	return _expression_properties.get(name, default)


func _run_changes() -> void:
	if _locked_down:
		return
		
	# enable the reentrance lock
	_locked_down = true
	
	while (not _queued_events.is_empty()) or _property_change_pending:
		# first run any pending property changes, so that we keep the order
		# in which stuff is processed
		if _property_change_pending:
			_property_change_pending = false
			_state._process_transitions(&\"\", true)
	
		if not _queued_events.is_empty():
			# process the next event	
			var next_event = _queued_events.pop_front()
			event_received.emit(next_event)
			_state._process_transitions(next_event, false)
	
	_locked_down = false


## Allows states to queue a transition for running. This will eventually run the transition
## once all currently running transitions have finished. States should call this method
## when they want to transition away from themselves. 
func _run_transition(transition:Transition, source:StateChartState) -> void:
	# if we are currently inside of a transition, queue it up. This can happen
	# if a state has an automatic transition on enter, in which case we want to
	# finish the current transition before starting a new one.
	if _transitions_processing_active:
		_queued_transitions.append({transition : source})
		return
		
	_transitions_processing_active = true

	# we can only transition away from a currently active state
	# if for some reason the state no longer is active, ignore the transition	
	_do_run_transition(transition, source)
	
	var execution_count := 1
	
	# if we still have transitions
	while _queued_transitions.size() > 0:
		var next_transition_entry = _queued_transitions.pop_front()
		var next_transition = next_transition_entry.keys()[0]
		var next_transition_source = next_transition_entry[next_transition]
		_do_run_transition(next_transition, next_transition_source)
		execution_count += 1
	
		if execution_count > 100:
			push_error(\"Infinite loop detected in transitions. Aborting. The state chart is now in an invalid state and no longer usable.\")
			break
	
	_transitions_processing_active = false

## Runs the transition. Used internally by the state chart, do not call this directly.	
func _do_run_transition(transition:Transition, source:StateChartState):
	if source.active:
		# Notify interested parties that the transition is about to be taken
		transition.taken.emit()
		source._handle_transition(transition, source)
	else:
		_warn_not_active(transition, source)	


func _warn_not_active(transition:Transition, source:StateChartState):
	push_warning(\"Ignoring request for transitioning from \", source.name, \" to \", transition.to, \" as the source state is no longer active. Check whether your trigger multiple state changes within a single frame.\")



## Calls the `step` function in all active states. Used for situations where `state_processing` and 
## `state_physics_processing` don't make sense (e.g. turn-based games, or games with a fixed timestep).
func step() -> void:
	if not is_node_ready():
		push_error(\"State chart is not yet ready. If you call `step` in `_ready`, please call it deferred, e.g. `state_chart.step.call_deferred()`.\")
		return
		
	if not is_instance_valid(_state):
		push_error(\"State chart has no root state. Ignoring call to `step`.\")
		return
	_state._state_step()

func _get_configuration_warnings() -> PackedStringArray:
	var warnings:PackedStringArray = []
	if get_child_count() != 1:
		warnings.append(\"StateChart must have exactly one child\")
	else:
		var child:Node = get_child(0)
		if not child is StateChartState:
			warnings.append(\"StateChart's child must be a State\")
	return warnings


"

[node name="Node2D" type="Node2D"]

[node name="Player" type="CharacterBody2D" parent="." groups=["player"]]
unique_name_in_owner = true
position = Vector2(73, 580)
script = ExtResource("1_xoidt")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Player"]
shape = SubResource("CapsuleShape2D_6eaqc")

[node name="Sprite2D" type="Sprite2D" parent="Player"]
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_aq8cg")

[node name="MoveCharacterBack" type="Node" parent="Player"]
script = ExtResource("3_0cdfv")

[node name="Punisher" type="Sprite2D" parent="."]
position = Vector2(73, 720)
scale = Vector2(0.81, 0.97001)
texture = ExtResource("4_u55yo")
script = ExtResource("2_mnr4h")

[node name="WallStaticBody2D" type="StaticBody2D" parent="."]
position = Vector2(0, 360)

[node name="CollisionShape2D" type="CollisionShape2D" parent="WallStaticBody2D"]
shape = SubResource("RectangleShape2D_24u1r")

[node name="Sprite2D" type="Sprite2D" parent="WallStaticBody2D"]
texture_repeat = 2
scale = Vector2(1, 25)
texture = ExtResource("4_hv57n")
region_enabled = true
region_rect = Rect2(0, 0, 70, 70)

[node name="FloorStaticBody2D" type="StaticBody2D" parent="."]
position = Vector2(0, 644)

[node name="CollisionShape2D" type="CollisionShape2D" parent="FloorStaticBody2D"]
position = Vector2(539.5, 35.5)
shape = SubResource("RectangleShape2D_71hhf")

[node name="Sprite2D" type="Sprite2D" parent="FloorStaticBody2D"]
texture_repeat = 2
position = Vector2(539.5, 36)
scale = Vector2(25.6411, 1.1)
texture = ExtResource("3_we4ca")
region_enabled = true
region_rect = Rect2(0, 0, 70, 70)

[node name="HUD" type="Control" parent="."]
custom_minimum_size = Vector2(1080, 720)
layout_mode = 3
anchors_preset = 0
offset_right = 1080.0
offset_bottom = 720.0

[node name="PanelContainer" type="PanelContainer" parent="HUD"]
custom_minimum_size = Vector2(200, 100)
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -618.0
offset_top = 196.0
offset_right = -418.0
offset_bottom = 340.0
grow_horizontal = 0
size_flags_horizontal = 3
size_flags_vertical = 0

[node name="Instructions" type="VBoxContainer" parent="HUD/PanelContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0
script = ExtResource("8_sdu8k")

[node name="GoInstruction" type="HBoxContainer" parent="HUD/PanelContainer/Instructions"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0

[node name="Label" type="Label" parent="HUD/PanelContainer/Instructions/GoInstruction"]
layout_mode = 2
size_flags_horizontal = 3
text = "Go !"

[node name="TextureRect" type="TextureRect" parent="HUD/PanelContainer/Instructions/GoInstruction"]
layout_mode = 2
size_flags_horizontal = 8
texture = ExtResource("8_06u38")

[node name="StopInstruction" type="HBoxContainer" parent="HUD/PanelContainer/Instructions"]
layout_mode = 2
size_flags_vertical = 0

[node name="Label" type="Label" parent="HUD/PanelContainer/Instructions/StopInstruction"]
layout_mode = 2
size_flags_horizontal = 3
text = "Stop!"

[node name="TextureRect" type="TextureRect" parent="HUD/PanelContainer/Instructions/StopInstruction"]
layout_mode = 2
size_flags_horizontal = 8
texture = ExtResource("4_7quu1")

[node name="WarningInstruction" type="HBoxContainer" parent="HUD/PanelContainer/Instructions"]
layout_mode = 2
size_flags_vertical = 0

[node name="Label" type="Label" parent="HUD/PanelContainer/Instructions/WarningInstruction"]
layout_mode = 2
size_flags_horizontal = 3
text = "Prepare to stop
"

[node name="TextureRect" type="TextureRect" parent="HUD/PanelContainer/Instructions/WarningInstruction"]
layout_mode = 2
size_flags_horizontal = 8
texture = ExtResource("14_ijdch")

[node name="FinishLineArea2D" type="Area2D" parent="."]
position = Vector2(1013, 572)

[node name="CollisionShape2D" type="CollisionShape2D" parent="FinishLineArea2D"]
scale = Vector2(-4.61429, -2.53186)
shape = SubResource("RectangleShape2D_7xdvd")

[node name="LollipopBaseBrown" type="Sprite2D" parent="FinishLineArea2D"]
position = Vector2(-2, 34)
texture = ExtResource("6_1swtq")

[node name="LollipopFruitGreen" type="Sprite2D" parent="FinishLineArea2D"]
position = Vector2(-2, -37)
texture = ExtResource("7_60v0s")

[node name="DetectFinishLineReached" type="Node" parent="FinishLineArea2D"]
script = ExtResource("6_to2lt")

[node name="StartingLineArea2D" type="Area2D" parent="."]
position = Vector2(207, 570)

[node name="CollisionShape2D" type="CollisionShape2D" parent="StartingLineArea2D"]
scale = Vector2(-4.61429, -2.53186)
shape = SubResource("RectangleShape2D_saorr")

[node name="LollipopBaseBrown" type="Sprite2D" parent="StartingLineArea2D"]
position = Vector2(-2, 34)
texture = ExtResource("6_1swtq")

[node name="LollipopFruitGreen" type="Sprite2D" parent="StartingLineArea2D"]
position = Vector2(-2, -37)
texture = ExtResource("7_bwe1x")

[node name="DetectStartingLineReached" type="Node" parent="StartingLineArea2D"]
script = ExtResource("8_ouh8i")

[node name="AnnounceCommands" type="Node" parent="."]
script = ExtResource("13_d88ly")

[node name="Timer" type="Timer" parent="AnnounceCommands"]
wait_time = 2.0

[node name="CheckPlayerMovement" type="Node" parent="."]
script = ExtResource("14_yfcr8")

[node name="StateChart" type="Node" parent="."]
script = SubResource("GDScript_upc64")

[node name="CompoundState" type="Node" parent="StateChart"]
script = ExtResource("18_3107p")
initial_state = NodePath("IdleState")

[node name="IdleState" type="Node" parent="StateChart/CompoundState"]
script = ExtResource("19_257rj")

[node name="ToGoState" type="Node" parent="StateChart/CompoundState/IdleState"]
script = ExtResource("20_nrba1")
to = NodePath("../../GoState")
event = &"started"
delay_in_seconds = "0.0"

[node name="GoState" type="Node" parent="StateChart/CompoundState"]
script = ExtResource("19_257rj")

[node name="ToIdleState" type="Node" parent="StateChart/CompoundState/GoState"]
script = ExtResource("20_nrba1")
to = NodePath("../../IdleState")
event = &"idled"
delay_in_seconds = "0.0"

[node name="ToWarning" type="Node" parent="StateChart/CompoundState/GoState"]
script = ExtResource("20_nrba1")
to = NodePath("../../WarningState")
event = &"next"
delay_in_seconds = "0.0"

[node name="WarningState" type="Node" parent="StateChart/CompoundState"]
script = ExtResource("19_257rj")

[node name="ToStopTransition" type="Node" parent="StateChart/CompoundState/WarningState"]
script = ExtResource("20_nrba1")
to = NodePath("../../StopState")
event = &"next"
delay_in_seconds = "0.0"

[node name="ToIdleState" type="Node" parent="StateChart/CompoundState/WarningState"]
script = ExtResource("20_nrba1")
to = NodePath("../../IdleState")
event = &"idled"
delay_in_seconds = "0.0"

[node name="StopState" type="Node" parent="StateChart/CompoundState"]
script = ExtResource("19_257rj")

[node name="ToGoState" type="Node" parent="StateChart/CompoundState/StopState"]
script = ExtResource("20_nrba1")
to = NodePath("../../GoState")
event = &"next"
delay_in_seconds = "0.0"

[node name="ToIdleState" type="Node" parent="StateChart/CompoundState/StopState"]
script = ExtResource("20_nrba1")
to = NodePath("../../IdleState")
event = &"idled"
delay_in_seconds = "0.0"

[connection signal="body_entered" from="FinishLineArea2D" to="FinishLineArea2D/DetectFinishLineReached" method="_on_finish_line_area_2d_body_entered"]
[connection signal="finished_line_reached" from="FinishLineArea2D/DetectFinishLineReached" to="AnnounceCommands" method="_on_detect_finish_line_reached_finished_line_reached"]
[connection signal="body_entered" from="StartingLineArea2D" to="StartingLineArea2D/DetectStartingLineReached" method="_on_starting_line_area_2d_body_entered"]
[connection signal="entered_play_area" from="StartingLineArea2D/DetectStartingLineReached" to="AnnounceCommands" method="_on_detect_starting_line_reached_entered_play_area"]
[connection signal="timeout" from="AnnounceCommands/Timer" to="AnnounceCommands" method="_on_timer_timeout"]
[connection signal="player_has_moved" from="CheckPlayerMovement" to="Player/MoveCharacterBack" method="_on_check_player_movement_player_has_moved"]
[connection signal="player_has_moved" from="CheckPlayerMovement" to="Punisher" method="_on_check_player_movement_player_has_moved"]
[connection signal="state_entered" from="StateChart/CompoundState/IdleState" to="HUD/PanelContainer/Instructions" method="_on_idle_state_state_entered"]
[connection signal="state_entered" from="StateChart/CompoundState/GoState" to="HUD/PanelContainer/Instructions" method="_on_go_state_state_entered"]
[connection signal="state_entered" from="StateChart/CompoundState/WarningState" to="HUD/PanelContainer/Instructions" method="_on_warning_state_state_entered"]
[connection signal="state_entered" from="StateChart/CompoundState/StopState" to="HUD/PanelContainer/Instructions" method="_on_stop_state_state_entered"]
[connection signal="state_physics_processing" from="StateChart/CompoundState/StopState" to="CheckPlayerMovement" method="_on_stop_state_state_physics_processing"]
